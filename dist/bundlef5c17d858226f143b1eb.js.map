{"version":3,"file":"bundlef5c17d858226f143b1eb.js","mappings":"mBACA,IAAIA,EAAsB,CAAC,ECD3BA,EAAoBC,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAGhB,CAFE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,G,MCAxB,IAAIC,EACAP,EAAoBC,EAAEO,gBAAeD,EAAYP,EAAoBC,EAAEQ,SAAW,IACtF,IAAIC,EAAWV,EAAoBC,EAAES,SACrC,IAAKH,GAAaG,IACbA,EAASC,gBACZJ,EAAYG,EAASC,cAAcC,MAC/BL,GAAW,CACf,IAAIM,EAAUH,EAASI,qBAAqB,UACzCD,EAAQE,SAAQR,EAAYM,EAAQA,EAAQE,OAAS,GAAGH,IAC5D,CAID,IAAKL,EAAW,MAAM,IAAIS,MAAM,yDAChCT,EAAYA,EAAUU,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpFjB,EAAoBkB,EAAIX,C,8GCXlBY,EAAW,IAAIC,MAAM,GACrBC,EAAU,IAAID,MAAM,GACpBE,EAAW,IAAIF,MAAM,GAW3BG,eAAeC,EAAUC,SALhB,IAAIC,SAAQC,IACjBR,EAASS,OACTT,EAASU,QAAUF,MAMN,IAAXF,GACFK,QAAQC,IAAI,YACZV,EAAQO,QAERN,EAASM,MAIb,CArBAT,EAASa,OACTX,EAAQW,OACRV,EAASU,OAqBT,MAAMC,EAAO,CAACC,EAAKC,EAAO,KAAMC,EAAK,KAAMC,EAAK,KAAMC,EAAQ,OAC5D,IAAIC,EAAa,EAIbxB,EAASmB,EAWb,MAAO,CACLnB,SACAoB,OACAK,EAjBQJ,EAkBRK,EAjBQJ,EAkBRK,KAjBWJ,EAkBPK,gBACF,OAAOJ,CACT,EACIK,YAAQC,GACVN,EAAaM,CACf,EACAC,IAtBU,KACVP,GAA0B,EACnBA,GAqBPQ,OAnBa,IACTR,GAAcxB,EAmBnB,EAgIGiC,EAAS,CAACC,EAAQ,QACtB,MAAMd,EAAOc,EACPC,EArHU,MAChB,MACMC,EAXC,CACLlB,EAAK,EAAG,WACRA,EAAK,EAAG,cACRA,EAAK,EAAG,WACRA,EAAK,EAAG,aACRA,EAAK,EAAG,cAOJmB,EAAkB,GAoElBC,EAAa,GAiCnB,MAAO,CACLC,YAxGkB,GAyGlBH,QACAC,kBACAG,UAxGgB,CAACpB,EAAMC,EAAIC,EAAIK,KAC/B,IAAIc,EAAOL,EAAMM,QAAQC,GAASA,EAAKvB,OAASA,IAAM,GACtD,GAAIC,EAAK,GAAKA,EAAKkB,GAAmBjB,EAAK,GAAKA,EAAKiB,EACnD,MAAM,IAAItC,MAAM,0BAElB,GACY,MAAT0B,GAAgBN,EATD,GASoBoB,EAAKzC,QAC/B,MAAT2B,GAAgBL,EAVD,GAUoBmB,EAAKzC,OAEzC,MAAM,IAAIC,MAAM,gCAGlB,GAAa,MAAT0B,EACF,IAAK,IAAIiB,EAAI,EAAGA,EAAIH,EAAKzC,OAAQ4C,IAC/B,GACEP,EAAgBK,QACbG,GAAUA,EAAMpB,IAAMJ,EAAKuB,GAAKC,EAAMnB,IAAMJ,IAC7CtB,OAAS,EAEX,MAAM,IAAIC,MAAM,8BAItB,GAAa,MAAT0B,EACF,IAAK,IAAIiB,EAAI,EAAGA,EAAIH,EAAKzC,OAAQ4C,IAC/B,GACEP,EAAgBK,QACbG,GAAUA,EAAMpB,IAAMJ,GAAMwB,EAAMnB,IAAMJ,EAAKsB,IAC9C5C,OAAS,EAEX,MAAM,IAAIC,MAAM,8BAUtB,GALAwC,EAAKhB,EAAIqB,SAASzB,GAClBoB,EAAKf,EAAIoB,SAASxB,GAClBmB,EAAKd,KAAOA,EAGRU,EAAgBK,QAAOpD,GAAMA,EAAE8B,OAASqB,EAAKrB,OAAMpB,OAAS,EAAG,CACjE,IAAI+C,EAAYV,EAAgBK,QAAOpD,GAAIA,EAAE8B,OAASqB,EAAKrB,OAAM,GACjE,IAAK,IAAIwB,EAAI,EAAGA,EAAIH,EAAKzC,OAAQ4C,IAClB,MAATjB,GACFoB,EAAUtB,EAAIgB,EAAKhB,EAAI,EACvBsB,EAAUrB,EAAIe,EAAKf,IAEnBqB,EAAUtB,EAAIgB,EAAKhB,EACnBsB,EAAUrB,EAAIe,EAAKf,EAAI,GAG3B,OAAOe,CACT,CAGA,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAKzC,OAAQ4C,IAClB,MAATjB,EACFU,EAAgBW,KAAK,CAAEvB,EAAGgB,EAAKhB,EAAImB,EAAGlB,EAAGe,EAAKf,EAAGN,KAAMqB,EAAKrB,OAE5DiB,EAAgBW,KAAK,CAAEvB,EAAGgB,EAAKhB,EAAGC,EAAGe,EAAKf,EAAIkB,EAAGxB,KAAMqB,EAAKrB,OAGhE,OAAOqB,CAAI,EA2CXH,aACAW,cAtCoB,CAACxB,EAAGC,KACxBD,EAAIqB,SAASrB,GACbC,EAAIoB,SAASpB,GACbY,EAAWU,KAAK,CAAEvB,IAAGC,MACrB,IAAIwB,GAAU,EAEd,IAAK,MAAMT,KAAQL,EACjB,GAAkB,MAAdK,EAAKd,MACP,GAAIF,GAAKgB,EAAKhB,GAAKA,EAAIgB,EAAKhB,EAAIgB,EAAKzC,QAAU0B,IAAMe,EAAKf,EAIxD,OAHAe,EAAKV,MACLmB,GAAU,EACVzC,GAAU,GACHyC,OAEJ,GAAkB,MAAdT,EAAKd,MACVF,IAAMgB,EAAKhB,GAAKC,GAAKe,EAAKf,GAAKA,EAAIe,EAAKf,EAAIe,EAAKzC,OAInD,OAHAyC,EAAKV,MACLmB,GAAU,EACVzC,GAAU,GACHyC,EAOb,OADAzC,GAAU,GACHyC,CAAO,EAadC,QAXc,IACPf,EAAMgB,OAAOX,GAASA,EAAKT,WAWnC,EAKiBqB,GAgElB,MAAO,CACLjC,OACAe,YACAmB,OAlEa,CAACC,EAAUC,EAAIC,KAC5B,IAAIhC,EAAIqB,SAASU,GACb9B,EAAIoB,SAASW,GACjB,GACEhC,EAAI,GACJA,GAAK8B,EAASpB,UAAUI,aACxBb,EAAI,GACJA,GAAK6B,EAASpB,UAAUI,YAExB,MAAM,IAAItC,MAAM,wBAElB,GAEe,GADbsD,EAASpB,UAAUG,WAAWI,QAAQpD,GAAMA,EAAEmC,IAAMA,GAAKnC,EAAEoC,IAAMA,IAC9D1B,OAEH,MAAM,IAAIC,MAAM,oBAGlB,MAAO,CAAEiD,QAASK,EAASpB,UAAUc,cAAcxB,EAAGC,GAAID,IAAGC,IAAG,EAiDhEgC,mBA9CyB,KACzBvB,EAAUC,MAAMuB,SAAQ,CAAClB,EAAMmB,EAAOC,KACpC,IAAIC,EAAcC,KAAKC,SACnBC,EAAO,KACPC,EAAO,KACPvC,EAAO,KAiBX,IAfImC,EAAc,IAChBnC,EAAO,IACPsC,EAAOF,KAAKI,MACVJ,KAAKC,UAAY7B,EAAUI,YAAcE,EAAKzC,SAEhDkE,EAAOH,KAAKI,MAAMJ,KAAKC,SAAW7B,EAAUI,eAE5CZ,EAAO,IACPsC,EAAOF,KAAKI,MAAMJ,KAAKC,SAAW7B,EAAUI,aAC5C2B,EAAOH,KAAKI,MACVJ,KAAKC,UAAY7B,EAAUI,YAAcE,EAAKzC,UAK3CoE,EAAU3B,EAAMd,EAAMsC,EAAMC,EAAM/B,EAAUE,kBACjDyB,EAAcC,KAAKC,SACfF,EAAc,IAChBnC,EAAO,IACPsC,EAAOF,KAAKI,MACVJ,KAAKC,UAAY7B,EAAUI,YAAcE,EAAKzC,SAEhDkE,EAAOH,KAAKI,MAAMJ,KAAKC,SAAW7B,EAAUI,eAE5CZ,EAAO,IACPsC,EAAOF,KAAKI,MAAMJ,KAAKC,SAAW7B,EAAUI,aAC5C2B,EAAOH,KAAKI,MACVJ,KAAKC,UAAY7B,EAAUI,YAAcE,EAAKzC,UAIpDmC,EAAUK,UAAUC,EAAKrB,KAAM6C,EAAMC,EAAMvC,EAAK,GAChD,EAQH,EAGH,IAAI0C,EAAQpC,EAAO,OACf,EAAWA,EAAO,YAiBtB,SAASmC,EAAU3B,EAAMd,EAAMsC,EAAMC,EAAMI,GACzC,IAAIC,EAAoB,GACxB,GAAa,MAAT5C,EACF,IAAK,IAAIiB,EAAI,EAAGA,EAAIH,EAAKzC,OAAQ4C,IAC/B2B,EAAkBvB,KAAK,CAAEvB,EAAGqB,SAASmB,GAAQrB,EAAGlB,EAAGoB,SAASoB,UAEzD,GAAa,MAATvC,EACT,IAAK,IAAIiB,EAAI,EAAGA,EAAIH,EAAKzC,OAAQ4C,IAC/B2B,EAAkBvB,KAAK,CAAEvB,EAAGqB,SAASmB,GAAOvC,EAAGoB,SAASoB,GAAQtB,IAGpE,IAAK,IAAIA,EAAI,EAAGA,EAAI2B,EAAkBvE,OAAQ4C,IAC5C,GACE0B,EAAS5B,QACNpD,GACCA,EAAEmC,GAAK8C,EAAkB3B,GAAGnB,GAC5BnC,EAAEoC,GAAK6C,EAAkB3B,GAAGlB,GACpB,OAARpC,EAAEmC,GACM,OAARnC,EAAEoC,GACFpC,EAAE8B,OAASqB,EAAKrB,OAClBpB,OAAS,EAEX,OAAO,EAGX,OAAO,CACT,CAxCA,EAASwE,aAAe,SAAUC,GAChC,IAAIhD,EAAIsC,KAAKI,MAAMJ,KAAKC,SAAWS,EAAMtC,UAAUI,aAC/Cb,EAAIqC,KAAKI,MAAMJ,KAAKC,SAAWS,EAAMtC,UAAUI,aACnD,KAC6E,GAA3EkC,EAAMtC,UAAUG,WAAWI,QAAQpD,GAAMA,EAAEmC,IAAMA,GAAKnC,EAAEoC,IAAMA,IAAG1B,QAEjEyB,EAAIsC,KAAKI,MAAMJ,KAAKC,SAAWS,EAAMtC,UAAUI,aAC/Cb,EAAIqC,KAAKI,MAAMJ,KAAKC,SAAWS,EAAMtC,UAAUI,aAGjD,OAAO,EAASe,OAAOmB,EAAOhD,EAAGC,EACnC,EA+BA,EAASgC,qBClTT,MAAMgB,EAAW/E,SAASgF,eAAe,YACnC,EAAQhF,SAASgF,eAAe,SAChCC,EAAiBjF,SAASgF,eAAe,kBACzCE,EAAYlF,SAASgF,eAAe,eACpCG,EAAgBnF,SAASgF,eAAe,iBACxCI,EAAapF,SAASqF,cAAc,2BACpCC,EAAgBtF,SAASgF,eAAe,oBAKxCO,GAJevF,SAASgF,eAAe,SAIvB,CAACQ,EAASC,EAAW,QACzC,IAAK,IAAIxC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,IAAIyC,EAAO1F,SAAS2F,cAAc,OAC9BC,EAAQ3C,EACZyC,EAAKG,aAAa,SAAUD,EAAQ,IACpCF,EAAKG,aAAa,SAAUzB,KAAKI,MAAMoB,EAAQ,KAC3C3C,EAAI,KACN2C,EAAQ,IAAME,OAAOF,IAEvBF,EAAKK,UAAUC,IAAI,QAEnBN,EAAKO,GAAKT,EAAQS,GAAKL,EACnBH,GACFC,EAAKQ,iBAAiB,QAAST,GAEjCD,EAAQW,OAAOT,EACjB,IAGIU,EAAyB,CAACC,EAAcC,EAAMC,KAClC,IACTF,EAAaG,iBAAiB,IAAIH,EAAaJ,cAE9CjC,SAAS0B,IACbA,EAAKQ,iBAAiBK,EAAMD,EAAK,GACjC,EAGAG,EAA8B,CAACJ,EAAcC,EAAMC,KACzC,IACTF,EAAaG,iBAAiB,IAAIH,EAAaJ,cAE9CjC,SAAS0B,IACbA,EAAKgB,oBAAoBH,EAAMD,EAAI,GACnC,EAmBEK,EAAgB,CAACC,EAAQ9E,EAAGC,EAAGwB,KACnC,IAAIsD,EAAS,KACE,aAAXD,IACFC,EAAS,YAEI,UAAXD,IACFC,EAAS,SAGX,IACIC,EADa9G,SAASgF,eAAe,GAAG6B,KACnBxB,cAAc,YAAYvD,eAAeC,OAC9DwB,EACFuD,EAAQf,UAAUC,IAAI,OAEtBc,EAAQf,UAAUC,IAAI,OACxB,EClEF,IAAIe,GAAU,EACd,MAAMC,EAAmBhH,SAASgF,eAAe,cACjD,IAAIiC,EAAY,EACZC,EAAcxC,EAAMlC,UAAUC,MAAMwE,GAGxC,MAwEME,EAA0BxH,IAxER,EAACA,EAAGmD,KAC1B,IAAIhB,EAAInC,EAAEyH,OAAOC,aAAa,UAC1BtF,EAAIpC,EAAEyH,OAAOC,aAAa,UAI9B,GAAIN,EAAJ,CACE,GAAMjF,GAAKgB,EAAKhB,GAAKC,GAAKe,EAAKf,EAC7B,OAEAgF,GAAU,EACVC,EAAiBM,UAAW,EAC5B,IAAK,IAAIrE,EAAI,EAAGA,EAAIH,EAAKzC,OAAQ4C,IAC/ByB,EAAMlC,UAAUE,gBAAgB6E,MAEnB,IAAIvH,SAASwG,iBAAiB,UACpCxC,SAASrE,IACZA,EAAE6H,QAAQ1E,OAAS,GAAGA,EAAKrB,QAC7B9B,EAAEoG,UAAU0B,OAAO,MACrB,GAIN,MAGA,KAAkB,MAAd3E,EAAKd,MACHF,EAAI,GAAKgB,EAAKzC,QAIF,MAAdyC,EAAKd,MACHD,EAAI,GAAKe,EAAKzC,QADpB,CAMA,GAAIoE,EAAU3B,EAAMA,EAAKd,KAAMF,EAAGC,EAAG2C,EAAMlC,UAAUE,iBAGnD,OAFAtB,QAAQC,IAAIqD,EAAMlC,UAAUE,sBAC5BtB,QAAQC,IAAI,WAId0F,GAAU,EAGVrC,EAAMlC,UAAUK,UAAUC,EAAKrB,KAAMK,EAAGC,EAAGe,EAAKd,MAEhD,IAAK,IAAIiB,EAAI,EAAGA,EAAIH,EAAKzC,OAAQ4C,IAAK,CACpC,IAAIyC,EAAO,KACX,GAAkB,MAAd5C,EAAKd,KAAc,CACrB,IAAI0F,EAAQvE,SAASL,EAAKhB,GAAKmB,EAC/ByC,EAAO1F,SAASqF,cAAc,YAAYqC,eAAmB5E,EAAKf,MACpE,CACA,GAAkB,MAAde,EAAKd,KAAc,CACrB,IAAI2F,EAAQxE,SAASL,EAAKf,GAAKkB,EAC/ByC,EAAO1F,SAASqF,cAAc,YAAYvC,EAAKhB,eAAe6F,MAChE,CACU,IAAN1E,GACFyC,EAAKK,UAAUC,IAAI,QAErBN,EAAKK,UAAUC,IAAI,WAEnBN,EAAKK,UAAUC,IAAI,OACnBN,EAAK8B,QAAQ1E,KAAO,GAAGA,EAAKrB,MAC9B,CACAsF,GAAU,EACVC,EAAiBM,UAAW,CAhC5B,CAiCM,EAKNM,CAAgBjI,EAAGuH,EAAY,EA0D3BW,EAAyBlI,IAtDR,EAACA,EAAGmD,KACzB,GACEnD,EAAEyH,OAAOC,aAAa,WAAavE,EAAKhB,GACxCnC,EAAEyH,OAAOC,aAAa,WAAavE,EAAKf,IAC5B,IAAZgF,EACA,CAEAA,GAAU,EACVC,EAAiBM,UAAW,EAC5B,IAAK,IAAIrE,EAAI,EAAGA,EAAIH,EAAKzC,OAAQ4C,IAC/ByB,EAAMlC,UAAUE,gBAAgB6E,KAEpC,CAGe,IAAIvH,SAASwG,iBAAiB,UACpCxC,SAASrE,IACZA,EAAE6H,QAAQ1E,OAAS,GAAGA,EAAKrB,SAC7B9B,EAAEoG,UAAU0B,OAAO,OACnB9H,EAAEoG,UAAU0B,OAAO,WACrB,IAGgB,MAAd3E,EAAKd,MAAgBc,EAAKf,GAAK,GAAKe,EAAKzC,OAC3CyC,EAAKd,KAAO,IACW,MAAdc,EAAKd,MAAgBc,EAAKhB,GAAK,GAAKgB,EAAKzC,SAClDyC,EAAKd,KAAO,KAEd,IAAK,IAAIiB,EAAI,EAAGA,EAAIH,EAAKzC,OAAQ4C,IAAK,CACpC,GAAkB,MAAdH,EAAKd,KAAc,CACrB,IAAI0F,EAAQvE,SAASL,EAAKhB,GAAKmB,EAC3ByC,EAAO1F,SAASqF,cAClB,YAAYqC,eAAmB5E,EAAKf,OAE5B,IAANkB,GACFyC,EAAKK,UAAUC,IAAI,QAErBN,EAAKK,UAAUC,IAAI,WACnBN,EAAK8B,QAAQ1E,KAAO,GAAGA,EAAKrB,MAC9B,CACA,GAAkB,MAAdqB,EAAKd,KAAc,CACrB,IAAI2F,EAAQxE,SAASL,EAAKf,GAAKkB,EAC3ByC,EAAO1F,SAASqF,cAClB,YAAYvC,EAAKhB,eAAe6F,OAExB,IAAN1E,GACFyC,EAAKK,UAAUC,IAAI,QAErBN,EAAKK,UAAUC,IAAI,WACnBN,EAAK8B,QAAQ1E,KAAO,GAAGA,EAAKrB,MAC9B,CACF,GAIAqG,CAAenI,EAAGuH,EAAY,EA+D1Ba,EAAsBpI,IA3DR,EAACA,EAAGmD,KAEtB,GAAIiE,EAAS,OAGb,IAAIjF,EAAInC,EAAEyH,OAAOC,aAAa,UAC1BtF,EAAIpC,EAAEyH,OAAOC,aAAa,UAE9B,KAAkB,MAAdvE,EAAKd,MACHF,EAAI,GAAKgB,EAAKzC,QAIF,MAAdyC,EAAKd,MACHD,EAAI,GAAKe,EAAKzC,QAMhBoE,EAAU3B,EAAMA,EAAKd,KAAMF,EAAGC,EAAG2C,EAAMlC,UAAUE,kBAArD,CAGkB,IAAI1C,SAASwG,iBAAiB,cAAc1D,EAAKrB,UACvDuC,SAASrE,IACfA,EAAE6H,QAAQ1E,OAAS,GAAGA,EAAKrB,gBACtB9B,EAAE6H,QAAQ1E,KACjBnD,EAAEoG,UAAU0B,OAAO,WACnB9H,EAAEoG,UAAU0B,OAAO,QACrB,IAEF3E,EAAKhB,EAAInC,EAAEyH,OAAOC,aAAa,UAC/BvE,EAAKf,EAAIpC,EAAEyH,OAAOC,aAAa,UAE/B,IAAK,IAAIpE,EAAI,EAAGA,EAAIH,EAAKzC,OAAQ4C,IAAK,CACpC,GAAkB,MAAdH,EAAKd,KAAc,CACrB,IAAI0F,EAAQvE,SAASL,EAAKhB,GAAKmB,EAC3ByC,EAAO1F,SAASqF,cAClB,YAAYqC,eAAmB5E,EAAKf,OAE5B,IAANkB,GACFyC,EAAKK,UAAUC,IAAI,QAErBN,EAAKK,UAAUC,IAAI,WACnBN,EAAK8B,QAAQ1E,KAAO,GAAGA,EAAKrB,MAC9B,CACA,GAAkB,MAAdqB,EAAKd,KAAc,CACrB,IAAI2F,EAAQxE,SAASL,EAAKf,GAAKkB,EAC3ByC,EAAO1F,SAASqF,cAClB,YAAYvC,EAAKhB,eAAe6F,OAExB,IAAN1E,GACFyC,EAAKK,UAAUC,IAAI,QAErBN,EAAKK,UAAUC,IAAI,WACnBN,EAAK8B,QAAQ1E,KAAO,GAAGA,EAAKrB,MAC9B,CACF,CArC6E,CAqC7E,EAGAuG,CAAYrI,EAAGuH,EAAY,EAoC7BF,EAAiBd,iBAAiB,SAhCd,KASlB,GARAO,EAA4B1B,EAAUoC,EAAwB,SAC9DV,EAA4B1B,EAAU8C,EAAuB,YAC7DpB,EAA4B1B,EAAUgD,EAAoB,aAC1Dd,IAEIA,GAAavC,EAAMlC,UAAUC,MAAMpC,OAAS,IAC9C2G,EAAiBiB,YAAc,UAE7BhB,GAAavC,EAAMlC,UAAUC,MAAMpC,OAYrC,OAXA8E,EAAc8C,YAAc,GAC5B9C,EAAcY,UAAU0B,OAAO,gBAC/BT,EAAiBkB,MAAMC,QAAU,OACjClD,EAAeiD,MAAMC,QAAU,QAChB,IAAInI,SAASwG,iBAAiB,UACpCxC,SAASrE,IAChBA,EAAEoG,UAAU0B,OAAO,QACnB9H,EAAEoG,UAAUC,IAAI,SAAS,QC/MlB,MACX,IAAIoC,GAAW,EACXC,GAAc,EAElB,MA2CMC,EAAe,WACnB,IAAIC,EAASC,EAAe9D,GAExBf,EAAS,eAAsBe,GACnC,GAAIf,EAAOJ,QAAS,CAElB2B,EAAU+C,YAAc,mBACxBtB,EAAc,WAAYhD,EAAO7B,EAAG6B,EAAO5B,GAAG,GAC9C,IAAI0G,EAAQD,EAAe9D,GAC3B,GAAI+D,EAAMC,MAAQH,EAAOG,MAAO,CAC9B,IAAIC,EAAYF,EAAMG,KACnB7F,QAAQtB,IAAU8G,EAAOK,KAAKC,SAASpH,KAAO,GAC9CqH,cACH3D,EAAc8C,YAAc,kBAAkBU,IAChD,CACA,GAAIjE,EAAMlC,UAAUgB,UAIlB,OAHA4B,EAAW6C,YAAc,YACzB3C,EAAcS,UAAUC,IAAI,aAC5BoC,GAAW,EAGf,MACElD,EAAU+C,YAAc,eACxBtB,EAAc,WAAYhD,EAAO7B,EAAG6B,EAAO5B,GAAG,GAEhDsG,GAAc,CAChB,EAEMG,EAAiB,SAAU5B,GAC/B,IAAI8B,EAAQ,EACRE,EAAO,GAOX,OANAhC,EAAOpE,UAAUC,MAAMuB,SAASlB,IAC1BA,EAAKT,WACPuG,EAAKvF,KAAKP,EAAKrB,MACfiH,IACF,IAEK,CAAEA,QAAOE,OAClB,EAEArD,EAAc,GAnFK,SAAU5F,GAC3B,GAAIyI,EAAU,OACd,GAAIzI,EAAEyH,OAAO2B,QAAQ,SAAWpJ,EAAEyH,OAAO2B,QAAQ,SAC/C,OAEF,GAAIV,EACF,OAEFA,GAAc,EACdlD,EAAc8C,YAAc,GAE5B,IAAInG,EAAInC,EAAEyH,OAAOC,aAAa,UAC1BtF,EAAIpC,EAAEyH,OAAOC,aAAa,UAE1BkB,EAASC,EAAe,GAExB7E,EAASe,EAAMf,OAAO,EAAU7B,EAAGC,GAEvC,GAAI4B,EAAOJ,QAAS,CAElB2B,EAAU+C,YAAc,qBACxBtB,EAAc,QAAShD,EAAO7B,EAAG6B,EAAO5B,GAAG,GAC3C,IAAI0G,EAAQD,EAAe,GAC3B,GAAIC,EAAMC,MAAQH,EAAOG,MAAO,CAC9B,IAAIC,EAAYF,EAAMG,KACnB7F,QAAQtB,IAAU8G,EAAOK,KAAKC,SAASpH,KAAO,GAC9CqH,cACH3D,EAAc8C,YAAc,cAAcU,IAC5C,CACA,GAAI,sBAIF,OAHAvD,EAAW6C,YAAc,WACzB3C,EAAcS,UAAUC,IAAI,aAC5BoC,GAAW,EAGf,MACElD,EAAU+C,YAAc,cACxBtB,EAAc,QAAShD,EAAO7B,EAAG6B,EAAO5B,GAAG,GAE7CiH,WAAWV,EAAc,KAE3B,GA0CgC,ED2H9BW,GAGF/B,EAAcxC,EAAMlC,UAAUC,MAAMwE,GAEpCD,EAAiBM,UAAW,EAC5BlB,EAAuBrB,EAAUoC,EAAwB,SACzDf,EAAuBrB,EAAU8C,EAAuB,YACxDzB,EAAuBrB,EAAUgD,EAAoB,aACrDhB,GAAU,CAAK,IAKjB,MAMMmC,EAAkB,KAEtBjE,EAAeiD,MAAMC,QAAU,OAP/BhD,EAAcgE,UACZ,uRACFhE,EAAcY,UAAUC,IAAI,gBAS5BT,EAAcR,GACdqB,EAAuBrB,EAAUoC,EAAwB,SACzDf,EAAuBrB,EAAU8C,EAAuB,YACxDzB,EAAuBrB,EAAUgD,EAAoB,YAAY,EAG7C/H,SAASgF,eAAe,kBAoChCkB,iBAAiB,SAnCjB,KAgBZ,IAfAxB,EAAMlC,UAAUE,gBAAgBrC,OAAS,EACzCqE,EAAMlC,UAAUG,WAAWtC,OAAS,EACpC,mCAA4C,EAC5C,8BAAuC,EAEvCqE,EAAMlC,UAAUC,MAAMuB,SAASlB,IAC7BA,EAAKhB,EAAI,KACTgB,EAAKf,EAAI,KACTe,EAAKZ,QAAU,CAAC,IAElB,2BAAkCY,IAChCA,EAAKhB,EAAI,KACTgB,EAAKf,EAAI,KACTe,EAAKZ,QAAU,CAAC,IAEX,cACL,cAAkB,aAEpB,KAAO6C,EAASqE,YACdrE,EAASsE,YAAYtE,EAASuE,WAEhC,uBACAhE,EAAcS,UAAU0B,OAAO,QAC/BrC,EAAW6C,YAAc,GACzB/C,EAAU+C,YAAc,GACxBlB,GAAU,EACVE,EAAY,EACZC,EAAcxC,EAAMlC,UAAUC,MAAMwE,GACpCD,EAAiBkB,MAAMC,QAAU,QACjCnB,EAAiBM,UAAW,EAC5BN,EAAiBiB,YAAc,gBAC/BiB,GAAiB,IE9SnBA,G","sources":["webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/global","webpack://battleship/webpack/runtime/publicPath","webpack://battleship/./src/gamePieces.js","webpack://battleship/./src/dom.js","webpack://battleship/./src/humanPlaceShips.js","webpack://battleship/./src/gamePlay.js","webpack://battleship/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import fire_shot from './fire_shot.mp3';\nimport shot_hit from './shot_hit.mp3';\nimport shot_miss from './shot_miss.mp3';\n\nconst fireShot = new Audio(fire_shot);\nconst shotHit = new Audio(shot_hit);\nconst shotMiss = new Audio(shot_miss);\nfireShot.load();\nshotHit.load();\nshotMiss.load();\n\nfunction playFire(){\n  return new Promise(res=>{\n    fireShot.play()\n    fireShot.onended = res\n  })\n}\nasync function playSound(result){\n  const audio = fireShot;\n  await playFire(audio);\n  if (result === true){\n    console.log('hadsfasd')\n    shotHit.play();\n  } else {\n    shotMiss.play();\n  } \n\n  \n}\n\nconst Ship = (len, name = null, xi = null, yi = null, _axis = \"x\") => {\n  let _hitNumber = 0;\n  const x = xi;\n  const y = yi;\n  const axis = _axis;\n  let length = len;\n  const hit = () => {\n    _hitNumber = _hitNumber + 1;\n    return _hitNumber;\n  };\n  const isSunk = () => {\n    if (_hitNumber >= length) {\n      return true;\n    }\n    return false;\n  };\n  return {\n    length,\n    name,\n    x,\n    y,\n    axis,\n    get hitNumber() {\n      return _hitNumber;\n    },\n    set setHits(val) {\n      _hitNumber = val;\n    },\n    hit,\n    isSunk,\n  };\n};\n\nconst Fleet = () => {\n  return [\n    Ship(5, \"Carrier\"),\n    Ship(4, \"Battleship\"),\n    Ship(3, \"Cruiser\"),\n    Ship(3, \"Submarine\"),\n    Ship(2, \"Destroyer\"),\n  ];\n};\n\nconst Gameboard = () => {\n  const boardLength = 10;\n  const fleet = Fleet();\n  const occupiedSquares = [];\n  const placeShip = (name, xi, yi, axis) => {\n    let ship = fleet.filter((item) => item.name === name)[0];\n    if (xi < 0 || xi > boardLength - 1 || yi < 0 || yi > boardLength - 1) {\n      throw new Error(\"Location out of bounds\");\n    }\n    if (\n      (axis === \"x\" && xi > boardLength - ship.length) ||\n      (axis === \"y\" && yi > boardLength - ship.length)\n    ) {\n      throw new Error(\"Ship partially out of bounds\");\n    }\n\n    if (axis === \"x\") {\n      for (let i = 0; i < ship.length; i++) {\n        if (\n          occupiedSquares.filter(\n            (entry) => entry.x === xi + i && entry.y === yi\n          ).length > 0\n        ) {\n          throw new Error(\"Another ship is in the way\");\n        }\n      }\n    }\n    if (axis === \"y\") {\n      for (let i = 0; i < ship.length; i++) {\n        if (\n          occupiedSquares.filter(\n            (entry) => entry.x === xi && entry.y === yi + i\n          ).length > 0\n        ) {\n          throw new Error(\"Another ship is in the way\");\n        }\n      }\n    }\n\n    ship.x = parseInt(xi);\n    ship.y = parseInt(yi);\n    ship.axis = axis;\n\n    // If the ship is already in the array, modify it.\n    if (occupiedSquares.filter(e  => e.name === ship.name).length > 0) {\n      let shipStart = occupiedSquares.filter(e=> e.name === ship.name)[0]\n      for (let i = 0; i < ship.length; i++) {\n        if (axis === \"x\") {\n          shipStart.x = ship.x + 1;\n          shipStart.y = ship.y;\n        } else {\n          shipStart.x = ship.x;\n          shipStart.y = ship.y + 1;\n        }\n      }\n      return ship\n    }\n\n    // Else push the ship to the array\n    for (let i = 0; i < ship.length; i++) {\n      if (axis === \"x\") {\n        occupiedSquares.push({ x: ship.x + i, y: ship.y, name: ship.name });\n      } else {\n        occupiedSquares.push({ x: ship.x, y: ship.y + i, name: ship.name });\n      }\n    }\n    return ship;\n  };\n\n\n\n  const shotRecord = [];\n  const receiveAttack = (x, y) => {\n    x = parseInt(x);\n    y = parseInt(y);\n    shotRecord.push({ x, y });\n    let success = false;\n    let exit = false;\n    for (const ship of fleet) {\n      if (ship.axis === \"x\") {\n        if (x >= ship.x && x < ship.x + ship.length && y === ship.y) {\n          ship.hit();\n          success = true;\n          playSound(true);\n          return success;\n        }\n      } else if (ship.axis === \"y\") {\n        if (x === ship.x && y >= ship.y && y < ship.y + ship.length) {\n          ship.hit();\n          success = true;\n          playSound(true);\n          return success;\n        }\n      }\n    }\n \n\n    playSound(false)\n    return success;\n  };\n  const allSunk = () => {\n    return fleet.every((ship) => ship.isSunk());\n  };\n\n  return {\n    boardLength,\n    fleet,\n    occupiedSquares,\n    placeShip,\n    shotRecord,\n    receiveAttack,\n    allSunk,\n  };\n};\n\nconst Player = (_name = null) => {\n  const name = _name;\n  const gameboard = Gameboard();\n  const attack = (opponent, _x, _y) => {\n    let x = parseInt(_x);\n    let y = parseInt(_y);\n    if (\n      x < 0 ||\n      x >= opponent.gameboard.boardLength ||\n      y < 0 ||\n      y >= opponent.gameboard.boardLength\n    ) {\n      throw new Error(\"Attack out of bounds\");\n    }\n    if (\n      opponent.gameboard.shotRecord.filter((e) => e.x === x && e.y === y)\n        .length != 0\n    ) {\n      throw new Error(\"Attack redundant\");\n    }\n    \n    return { success: opponent.gameboard.receiveAttack(x, y), x, y };\n  };\n\n  const randomlyPlaceShips = () => {\n    gameboard.fleet.forEach((ship, index, arr) => {\n      let orientation = Math.random();\n      let xpos = null;\n      let ypos = null;\n      let axis = null;\n      // Randomally pick an axis location that fits the ship\n      if (orientation > 0.5) {\n        axis = \"x\";\n        xpos = Math.floor(\n          Math.random() * (gameboard.boardLength - ship.length)\n        );\n        ypos = Math.floor(Math.random() * gameboard.boardLength);\n      } else {\n        axis = \"y\";\n        xpos = Math.floor(Math.random() * gameboard.boardLength);\n        ypos = Math.floor(\n          Math.random() * (gameboard.boardLength - ship.length)\n        );\n      }\n\n      // If it clashes with a placed ship repick by recursion\n      while (isBlocked(ship, axis, xpos, ypos, gameboard.occupiedSquares)) {\n        orientation = Math.random();\n        if (orientation > 0.5) {\n          axis = \"x\";\n          xpos = Math.floor(\n            Math.random() * (gameboard.boardLength - ship.length)\n          );\n          ypos = Math.floor(Math.random() * gameboard.boardLength);\n        } else {\n          axis = \"y\";\n          xpos = Math.floor(Math.random() * gameboard.boardLength);\n          ypos = Math.floor(\n            Math.random() * (gameboard.boardLength - ship.length)\n          );\n        }\n      }\n      gameboard.placeShip(ship.name, xpos, ypos, axis);\n    });\n  };\n\n  return {\n    name,\n    gameboard,\n    attack,\n    randomlyPlaceShips,\n  };\n};\n\nlet human = Player(\"You\");\nlet computer = Player(\"Computer\");\n\n// Give computer an attack strategy\ncomputer.randomAttack = function (enemy) {\n  let x = Math.floor(Math.random() * enemy.gameboard.boardLength);\n  let y = Math.floor(Math.random() * enemy.gameboard.boardLength);\n  while (\n    enemy.gameboard.shotRecord.filter((e) => e.x === x && e.y === y).length != 0\n  ) {\n    x = Math.floor(Math.random() * enemy.gameboard.boardLength);\n    y = Math.floor(Math.random() * enemy.gameboard.boardLength);\n  }\n  //  Returns true if success\n  return computer.attack(enemy, x, y);\n};\n\n// isBlocked() helps computer place its ships\nfunction isBlocked(ship, axis, xpos, ypos, occSqArr) {\n  let coOrdinatesToTest = [];\n  if (axis === \"x\") {\n    for (let i = 0; i < ship.length; i++) {\n      coOrdinatesToTest.push({ x: parseInt(xpos) + i, y: parseInt(ypos) });\n    }\n  } else if (axis === \"y\") {\n    for (let i = 0; i < ship.length; i++) {\n      coOrdinatesToTest.push({ x: parseInt(xpos), y: parseInt(ypos) + i });\n    }\n  }\n  for (let i = 0; i < coOrdinatesToTest.length; i++) {\n    if (\n      occSqArr.filter(\n        (e) =>\n          e.x == coOrdinatesToTest[i].x &&\n          e.y == coOrdinatesToTest[i].y &&\n          e.x !== null &&\n          e.y !== null &&\n          e.name !== ship.name\n      ).length > 0\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\ncomputer.randomlyPlaceShips();\n//human.randomlyPlaceShips();\n\nexport { Ship, Fleet, Gameboard, Player, computer, human, isBlocked };\n","import { Fleet } from \"./gamePieces.js\";\n\nconst playerGB = document.getElementById(\"playerGB\");\nconst cpuGB = document.getElementById(\"cpuGB\");\nconst cpuGBcontainer = document.getElementById(\"cpuGBcontainer\");\nconst hitOrMiss = document.getElementById(\"hit-or-miss\");\nconst announcements = document.getElementById(\"announcements\");\nconst endGameMsg = document.querySelector(\"[data-end-game-message]\");\nconst endGameScreen = document.getElementById(\"end-game-message\");\nconst preGameFleet = document.getElementById(\"fleet\");\n\n\n\nconst makeGameboard = (someDiv, callback = null) => {\n  for (let i = 0; i < 100; i++) {\n    let cell = document.createElement(\"div\");\n    let idNum = i;\n    cell.setAttribute(\"data-x\", idNum % 10);\n    cell.setAttribute(\"data-y\", Math.floor(idNum / 10));\n    if (i < 10) {\n      idNum = \"0\" + String(idNum);\n    }\n    cell.classList.add(\"cell\");\n\n    cell.id = someDiv.id + idNum;\n    if (callback) {\n      cell.addEventListener(\"click\", callback);\n    }\n    someDiv.append(cell);\n  }\n};\n\nconst addCallbackToGameboard = (gameBoardDiv, func, type) => {\n    const cells = [\n      ...gameBoardDiv.querySelectorAll(`#${gameBoardDiv.id}> .cell`),\n    ];\n    cells.forEach((cell) => {\n      cell.addEventListener(type, func);\n    });\n};\n\nconst removeCallbackFromGameboard = (gameBoardDiv, func, type) => {\n  const cells = [\n    ...gameBoardDiv.querySelectorAll(`#${gameBoardDiv.id}> .cell`),\n  ];\n  cells.forEach((cell) => {\n    cell.removeEventListener(type, func)\n  });\n};\n\nconst makeFleet = (someDiv, callback = null) => {\n  let fleetToPlace = Fleet();\n  fleetToPlace.forEach((ship) => {\n    const shipNameDiv = document.createElement(\"div\");\n    shipNameDiv.textContent = ship.name;\n    shipNameDiv.setAttribute(\"data-name\", `${ship.name}`);\n    const shipBodyDiv = document.createElement(\"div\");\n    shipBodyDiv.draggable = true;\n    shipBodyDiv.classList.add(\"ship\");\n    for (let i = 0; i < ship.length; i++) {\n      shipBodyDiv.append(document.createElement(\"div\"));\n    }\n    someDiv.append(shipNameDiv, shipBodyDiv);\n  });\n};\n\nconst displayAttack = (player, x, y, success) => {\n  let parent = null;\n  if (player === \"computer\") {\n    parent = 'playerGB';\n  }\n  if (player === \"human\") {\n    parent = 'cpuGB'\n  }\n\n  let whichBoard = document.getElementById(`${parent}`);\n  let element = whichBoard.querySelector(`[data-x=\"${x}\"][data-y=\"${y}\"]`); \n  if (success) {\n    element.classList.add(\"hit\");\n  } else {\n    element.classList.add(\"miss\");\n  }\n};\n\nexport {\n  makeGameboard,\n  displayAttack,\n  playerGB,\n  cpuGB,\n  hitOrMiss,\n  announcements,\n  endGameMsg,\n  endGameScreen,\n  makeFleet,\n  preGameFleet,\n  cpuGBcontainer,\n  addCallbackToGameboard,\n  removeCallbackFromGameboard,\n};\n","import {\n  cpuGBcontainer,\n  announcements,\n  makeGameboard,\n  playerGB,\n  addCallbackToGameboard,\n  removeCallbackFromGameboard,\n  cpuGB,\n  endGameMsg,\n  endGameScreen,\n  hitOrMiss,\n} from \"./dom.js\";\nimport { computer, human, isBlocked } from \"./gamePieces.js\";\nimport { game } from \"./gamePlay.js\";\n\nlet setShip = false;\nconst changeShipButton = document.getElementById(\"changeShip\");\nlet shipIndex = 0;\nlet currentShip = human.gameboard.fleet[shipIndex];\n\n// On click callback\nconst setGridPosition = (e, ship) => {\n  let x = e.target.getAttribute(\"data-x\");\n  let y = e.target.getAttribute(\"data-y\");\n\n  // If the ship is placed and user is not clicking on head of that ship, ignore it\n  // Otherwise remove the ship from the occupied array and scrub it off the board\n  if (setShip) {\n    if (!(x == ship.x && y == ship.y)) {\n      return;\n    } else {\n      setShip = false;\n      changeShipButton.disabled = true;\n      for (let i = 0; i < ship.length; i++) {\n        human.gameboard.occupiedSquares.pop();\n      }\n      let allCells = [...document.querySelectorAll(\".cell\")];\n      allCells.forEach((e) => {\n        if (e.dataset.ship === `${ship.name}`) {\n          e.classList.remove(\"set\");\n        }\n      });\n      return;\n    }\n  }\n\n  // If the ship can't fit, don't place it\n  if (ship.axis === \"x\") {\n    if (x > 10 - ship.length) {\n      return;\n    }\n  }\n  if (ship.axis === \"y\") {\n    if (y > 10 - ship.length) {\n      return;\n    }\n  }\n  // If the ship overlaps with another ship, don't place it, just exit\n  if (isBlocked(ship, ship.axis, x, y, human.gameboard.occupiedSquares)) {\n    console.log(human.gameboard.occupiedSquares);\n    console.log(\"blocked\");\n    return;\n  }\n\n  setShip = true;\n  // Place ship, mark the board\n\n  human.gameboard.placeShip(ship.name, x, y, ship.axis);\n\n  for (let i = 0; i < ship.length; i++) {\n    let cell = null;\n    if (ship.axis === \"x\") {\n      let xcord = parseInt(ship.x) + i;\n      cell = document.querySelector(`[data-x=\"${xcord}\"][data-y=\"${ship.y}\"]`);\n    }\n    if (ship.axis === \"y\") {\n      let ycord = parseInt(ship.y) + i;\n      cell = document.querySelector(`[data-x=\"${ship.x}\"][data-y=\"${ycord}\"]`);\n    }\n    if (i === 0) {\n      cell.classList.add(\"head\");\n    }\n    cell.classList.add(\"hasShip\");\n\n    cell.classList.add(\"set\");\n    cell.dataset.ship = `${ship.name}`;\n  }\n  setShip = true;\n  changeShipButton.disabled = false;\n  return;\n};\n\n// Named wrappers necessary so callback can be removed and can take a parameter\nconst setGridPositionWrapper = (e) => {\n  setGridPosition(e, currentShip);\n};\n\n// On double-click\nconst setOrientation = (e, ship) => {\n  if (\n    e.target.getAttribute(\"data-x\") == ship.x &&\n    e.target.getAttribute(\"data-y\") == ship.y &&\n    setShip === true\n  ) {\n    /// Problem below!!\n    setShip = false;\n    changeShipButton.disabled = true;\n    for (let i = 0; i < ship.length; i++) {\n      human.gameboard.occupiedSquares.pop();\n    }\n  }\n\n  // Clear the ship's position if it is already set\n  let allCells = [...document.querySelectorAll(\".cell\")];\n  allCells.forEach((e) => {\n    if (e.dataset.ship === `${ship.name}`) {\n      e.classList.remove(`set`);\n      e.classList.remove(\"hasShip\");\n    }\n  });\n\n  if (ship.axis === \"x\" && ship.y <= 10 - ship.length) {\n    ship.axis = \"y\";\n  } else if (ship.axis === \"y\" && ship.x <= 10 - ship.length) {\n    ship.axis = \"x\";\n  }\n  for (let i = 0; i < ship.length; i++) {\n    if (ship.axis === \"x\") {\n      let xcord = parseInt(ship.x) + i;\n      let cell = document.querySelector(\n        `[data-x=\"${xcord}\"][data-y=\"${ship.y}\"]`\n      );\n      if (i === 0) {\n        cell.classList.add(\"head\");\n      }\n      cell.classList.add(\"hasShip\");\n      cell.dataset.ship = `${ship.name}`;\n    }\n    if (ship.axis === \"y\") {\n      let ycord = parseInt(ship.y) + i;\n      let cell = document.querySelector(\n        `[data-x=\"${ship.x}\"][data-y=\"${ycord}\"]`\n      );\n      if (i === 0) {\n        cell.classList.add(\"head\");\n      }\n      cell.classList.add(\"hasShip\");\n      cell.dataset.ship = `${ship.name}`;\n    }\n  }\n};\n\nconst setOrientationWrapper = (e) => {\n  setOrientation(e, currentShip);\n};\n\n// On hover\nconst hoverEffect = (e, ship) => {\n  // If ship is placed, no hover effect\n  if (setShip) return;\n\n  // If the ship can't fit, no hover effect\n  let x = e.target.getAttribute(\"data-x\");\n  let y = e.target.getAttribute(\"data-y\");\n\n  if (ship.axis === \"x\") {\n    if (x > 10 - ship.length) {\n      return;\n    }\n  }\n  if (ship.axis === \"y\") {\n    if (y > 10 - ship.length) {\n      return;\n    }\n  }\n\n  // If the ship overlaps, no effect\n  if (isBlocked(ship, ship.axis, x, y, human.gameboard.occupiedSquares)) return;\n\n  // Clear the ship's position if it is already set\n  let oldPosition = [...document.querySelectorAll(`[data-ship=${ship.name}]`)];\n  oldPosition.forEach((e) => {\n    if (e.dataset.ship === `${ship.name}`) {\n      delete e.dataset.ship;\n      e.classList.remove(`hasShip`);\n      e.classList.remove(`head`);\n    }\n  });\n  ship.x = e.target.getAttribute(\"data-x\");\n  ship.y = e.target.getAttribute(\"data-y\");\n\n  for (let i = 0; i < ship.length; i++) {\n    if (ship.axis === \"x\") {\n      let xcord = parseInt(ship.x) + i;\n      let cell = document.querySelector(\n        `[data-x=\"${xcord}\"][data-y=\"${ship.y}\"]`\n      );\n      if (i === 0) {\n        cell.classList.add(\"head\");\n      }\n      cell.classList.add(\"hasShip\");\n      cell.dataset.ship = `${ship.name}`;\n    }\n    if (ship.axis === \"y\") {\n      let ycord = parseInt(ship.y) + i;\n      let cell = document.querySelector(\n        `[data-x=\"${ship.x}\"][data-y=\"${ycord}\"]`\n      );\n      if (i === 0) {\n        cell.classList.add(\"head\");\n      }\n      cell.classList.add(\"hasShip\");\n      cell.dataset.ship = `${ship.name}`;\n    }\n  }\n};\nconst hoverEffectWrapper = (e) => {\n  hoverEffect(e, currentShip);\n};\n\n// On button press\nconst getNextShip = () => {\n  removeCallbackFromGameboard(playerGB, setGridPositionWrapper, \"click\");\n  removeCallbackFromGameboard(playerGB, setOrientationWrapper, \"dblclick\");\n  removeCallbackFromGameboard(playerGB, hoverEffectWrapper, \"mouseover\");\n  shipIndex++;\n\n  if (shipIndex == human.gameboard.fleet.length - 1) {\n    changeShipButton.textContent = \"Finish\";\n  }\n  if (shipIndex == human.gameboard.fleet.length) {\n    announcements.textContent = \"\";\n    announcements.classList.remove(\"instructions\");\n    changeShipButton.style.display = \"none\";\n    cpuGBcontainer.style.display = \"block\";\n    let allCells = [...document.querySelectorAll(\".cell\")];\n    allCells.forEach((e) => {\n      e.classList.remove(\"head\");\n      e.classList.add(\"gameOn\");\n    });\n\n    game();\n    return;\n  }\n  currentShip = human.gameboard.fleet[shipIndex];\n\n  changeShipButton.disabled = true;\n  addCallbackToGameboard(playerGB, setGridPositionWrapper, \"click\");\n  addCallbackToGameboard(playerGB, setOrientationWrapper, \"dblclick\");\n  addCallbackToGameboard(playerGB, hoverEffectWrapper, \"mouseover\");\n  setShip = false;\n};\n\nchangeShipButton.addEventListener(\"click\", getNextShip);\n\nconst instructions = () => {\n  announcements.innerHTML =\n    \"Click on a cell to place a ship. Clicking on the head of the most recently placed ship allows you to move it again. <br/> &nbsp <br/> Double-clicking changes the ship's oriention. <br/> &nbsp <br/>When you finish placing ships, attack your opponent by clicking on their board.\";\n  announcements.classList.add(\"instructions\");\n};\n\nconst humanPlaceShips = () => {\n  // Hide enemy board\n  cpuGBcontainer.style.display = \"none\";\n  instructions();\n\n  // Make the human gameboard once\n  makeGameboard(playerGB);\n  addCallbackToGameboard(playerGB, setGridPositionWrapper, \"click\");\n  addCallbackToGameboard(playerGB, setOrientationWrapper, \"dblclick\");\n  addCallbackToGameboard(playerGB, hoverEffectWrapper, \"mouseover\");\n};\n\nconst restartButton = document.getElementById(\"restart-button\");\nconst reset = () => {\n  human.gameboard.occupiedSquares.length = 0;\n  human.gameboard.shotRecord.length = 0;\n  computer.gameboard.occupiedSquares.length = 0;\n  computer.gameboard.shotRecord.length = 0;\n\n  human.gameboard.fleet.forEach((ship) => {\n    ship.x = null;\n    ship.y = null;\n    ship.setHits = 0;\n  });\n  computer.gameboard.fleet.forEach((ship) => {\n    ship.x = null;\n    ship.y = null;\n    ship.setHits = 0;\n  });\n  while (cpuGB.firstChild) {\n    cpuGB.removeChild(cpuGB.lastChild);\n  }\n  while (playerGB.firstChild) {\n    playerGB.removeChild(playerGB.lastChild);\n  }\n  computer.randomlyPlaceShips();\n  endGameScreen.classList.remove(\"show\");\n  endGameMsg.textContent = \"\";\n  hitOrMiss.textContent = \"\";\n  setShip = false;\n  shipIndex = 0;\n  currentShip = human.gameboard.fleet[shipIndex];\n  changeShipButton.style.display = \"block\";\n  changeShipButton.disabled = true;\n  changeShipButton.textContent = \"Get next ship\";\n  humanPlaceShips();\n};\n\nrestartButton.addEventListener(\"click\", reset);\n\nexport { humanPlaceShips };\n","\nimport { computer, human } from \"./gamePieces.js\";\nimport {\n  makeGameboard, \n  displayAttack, \n  cpuGB, \n  hitOrMiss, \n  announcements, \n  endGameMsg, \n  endGameScreen, \n  \n} from \"./dom.js\";\n\n\nconst revealCPUShips = () => {\n  for (const ship of computer.gameboard.fleet) {\n    for (let i = 0; i < ship.length; i++) {\n      let x = ship.x;\n      let y = ship.y;\n      if (ship.axis === \"x\") {\n        x = x + i;\n      } else {\n        y = y + i;\n      }\n      let element = cpuGB.querySelector( `[data-x=\"${x}\"][data-y=\"${y}\"]`);\n      element.classList.add(\"hasShip\");\n      element.setAttribute(\"data-name\", `${ship.name}`);\n    }\n  }\n};\n\nconst game = () => {\n  let gameOver = false;\n  let boardLocked = false;\n\n  const playerTurn = function (e) {\n    if (gameOver) return;\n    if (e.target.matches(\".hit\") || e.target.matches(\".miss\")) {\n      return;\n    }\n    if (boardLocked) {\n      return;\n    }\n    boardLocked = true;\n    announcements.textContent = \"\";\n   \n    let x = e.target.getAttribute(\"data-x\");\n    let y = e.target.getAttribute(\"data-y\");\n  \n    let before = countSunkShips(computer);\n\n    let attack = human.attack(computer, x, y);\n   \n    if (attack.success) {\n\n      hitOrMiss.textContent = \"You hit the enemy!\";\n      displayAttack(\"human\", attack.x, attack.y, true);\n      let after = countSunkShips(computer);\n      if (after.count > before.count) {\n        let newlySunk = after.list\n          .filter((name) => !before.list.includes(name))[0]\n          .toLowerCase();\n        announcements.textContent = `You sunk a ${newlySunk}!`;\n      }\n      if (computer.gameboard.allSunk()) {\n        endGameMsg.textContent = \"You won!\";\n        endGameScreen.classList.add(\"show\");\n        gameOver = true;\n        return;\n      }\n    } else {\n      hitOrMiss.textContent = \"You missed!\";\n      displayAttack(\"human\", attack.x, attack.y, false);\n    }\n    setTimeout(computerTurn, 2500);\n\n  };\n\n  const computerTurn = function () {\n    let before = countSunkShips(human);\n\n    let attack = computer.randomAttack(human);\n    if (attack.success) {\n      \n      hitOrMiss.textContent = \"You've been hit!\";\n      displayAttack(\"computer\", attack.x, attack.y, true);\n      let after = countSunkShips(human);\n      if (after.count > before.count) {\n        let newlySunk = after.list\n          .filter((name) => !before.list.includes(name))[0]\n          .toLowerCase();\n        announcements.textContent = `They sunk your ${newlySunk}!`;\n      }\n      if (human.gameboard.allSunk()) {\n        endGameMsg.textContent = \"You lost!\";\n        endGameScreen.classList.add(\"show\");\n        gameOver = true;\n        return;\n      }\n    } else {\n      hitOrMiss.textContent = \"They missed!\";\n      displayAttack(\"computer\", attack.x, attack.y, false);\n    }\n    boardLocked = false;\n  };\n\n  const countSunkShips = function (player) {\n    let count = 0;\n    let list = [];\n    player.gameboard.fleet.forEach((ship) => {\n      if (ship.isSunk()) {\n        list.push(ship.name);\n        count++;\n      }\n    });\n    return { count, list };\n  };\n\n  makeGameboard(cpuGB, playerTurn);\n  //revealCPUShips();\n};\n\nexport { game }","\nimport { humanPlaceShips } from \"./humanPlaceShips.js\";\n\n\nhumanPlaceShips();\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","fireShot","Audio","shotHit","shotMiss","async","playSound","result","Promise","res","play","onended","console","log","load","Ship","len","name","xi","yi","_axis","_hitNumber","x","y","axis","hitNumber","setHits","val","hit","isSunk","Player","_name","gameboard","fleet","occupiedSquares","shotRecord","boardLength","placeShip","ship","filter","item","i","entry","parseInt","shipStart","push","receiveAttack","success","allSunk","every","Gameboard","attack","opponent","_x","_y","randomlyPlaceShips","forEach","index","arr","orientation","Math","random","xpos","ypos","floor","isBlocked","human","occSqArr","coOrdinatesToTest","randomAttack","enemy","playerGB","getElementById","cpuGBcontainer","hitOrMiss","announcements","endGameMsg","querySelector","endGameScreen","makeGameboard","someDiv","callback","cell","createElement","idNum","setAttribute","String","classList","add","id","addEventListener","append","addCallbackToGameboard","gameBoardDiv","func","type","querySelectorAll","removeCallbackFromGameboard","removeEventListener","displayAttack","player","parent","element","setShip","changeShipButton","shipIndex","currentShip","setGridPositionWrapper","target","getAttribute","disabled","pop","dataset","remove","xcord","ycord","setGridPosition","setOrientationWrapper","setOrientation","hoverEffectWrapper","hoverEffect","textContent","style","display","gameOver","boardLocked","computerTurn","before","countSunkShips","after","count","newlySunk","list","includes","toLowerCase","matches","setTimeout","game","humanPlaceShips","innerHTML","firstChild","removeChild","lastChild"],"sourceRoot":""}