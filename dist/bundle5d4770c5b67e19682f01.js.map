{"version":3,"file":"bundle5d4770c5b67e19682f01.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,yCAAyC,gBAAgB;AACzD;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,qBAAqB,qDAAK;AAC1B;AACA;AACA;AACA,6CAA6C,UAAU;AACvD;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8CAA8C,OAAO;AACrD,qDAAqD,EAAE,aAAa,EAAE;AACtE;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAgBE;;;;;;;;;;;;;;;;;;;;;AClGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,iBAAiB;AACrC;AACA,+BAA+B,2CAA2C;AAC1E,QAAQ;AACR,+BAA+B,2CAA2C;AAC1E;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC,+BAA+B,0CAA0C;AACzE;AACA,IAAI;AACJ,oBAAoB,iBAAiB;AACrC,+BAA+B,0CAA0C;AACzE;AACA;AACA,kBAAkB,8BAA8B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEsE;;;;;;;;;;;;;;;;;AClRpB;AAUhC;;;AAGlB;AACA,qBAAqB,oEAAwB;AAC7C,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,oBAAoB,wDAAmB,cAAc,EAAE,aAAa,EAAE;AACtE;AACA,2CAA2C,UAAU;AACrD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,8DAAyB;AAC7B;AACA;AACA;AACA;AACA,gCAAgC,oDAAQ;AACxC,iBAAiB,wDAAY,CAAC,oDAAQ;AACtC;AACA;AACA,MAAM,0DAAqB;AAC3B,MAAM,sDAAa;AACnB,iCAAiC,oDAAQ;AACzC;AACA;AACA;AACA;AACA,QAAQ,8DAAyB,iBAAiB,UAAU;AAC5D;AACA,UAAU,sEAA0B;AACpC,QAAQ,2DAAsB;AAC9B,QAAQ,gEAA2B;AACnC;AACA;AACA;AACA,MAAM;AACN,MAAM,0DAAqB;AAC3B,MAAM,sDAAa;AACnB;AACA;AACA;;AAEA;AACA,gCAAgC,iDAAK;AACrC,iBAAiB,iEAAqB,CAAC,iDAAK;AAC5C;AACA,MAAM,0DAAqB;AAC3B,MAAM,sDAAa;AACnB,iCAAiC,iDAAK;AACtC;AACA;AACA;AACA;AACA,QAAQ,8DAAyB,qBAAqB,UAAU;AAChE;AACA,UAAU,mEAAuB;AACjC,QAAQ,2DAAsB;AAC9B,QAAQ,gEAA2B;AACnC;AACA;AACA;AACA,MAAM;AACN,MAAM,0DAAqB;AAC3B,MAAM,sDAAa;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,aAAa;AACb;;AAEA,EAAE,sDAAa,CAAC,0CAAK;AACrB;AACA;;;;;;;;;;;;;;;;;;;ACvGkB;AAC2C;AACxB;;AAErC;AACA;AACA;AACA,kBAAkB,iEAAqB;;AAEvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,sBAAsB,iBAAiB;AACvC,QAAQ,+EAAmC;AAC3C;AACA;AACA;AACA,kCAAkC,UAAU;AAC5C;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,yDAAS,wBAAwB,2EAA+B;AACtE,gBAAgB,2EAA+B;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA,EAAE,qEAAyB;;AAE3B,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA,gDAAgD,MAAM,aAAa,OAAO;AAC1E;AACA;AACA;AACA,gDAAgD,OAAO,aAAa,MAAM;AAC1E;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC,MAAM,+EAAmC;AACzC;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,IAAI;AACJ;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA,oBAAoB,MAAM,aAAa,OAAO;AAC9C;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;AACA,oBAAoB,OAAO,aAAa,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,yDAAS,wBAAwB,2EAA+B;;AAEtE;AACA,gEAAgE,UAAU;AAC1E;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA,oBAAoB,MAAM,aAAa,OAAO;AAC9C;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;AACA,oBAAoB,OAAO,aAAa,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE,oEAA2B,CAAC,6CAAQ;AACtC,EAAE,oEAA2B,CAAC,6CAAQ;AACtC,EAAE,oEAA2B,CAAC,6CAAQ;AACtC;;AAEA,mBAAmB,wEAA4B;AAC/C;AACA;AACA,mBAAmB,wEAA4B;AAC/C,IAAI,8DAAyB;AAC7B,IAAI,mEAA8B;AAClC;AACA,IAAI,iEAA4B;AAChC;AACA;AACA;AACA;AACA,KAAK;;AAEL,IAAI,kDAAI;AACR;AACA;AACA,gBAAgB,iEAAqB;;AAErC;AACA,EAAE,+DAAsB,CAAC,6CAAQ;AACjC,EAAE,+DAAsB,CAAC,6CAAQ;AACjC,EAAE,+DAAsB,CAAC,6CAAQ;AACjC;AACA;;AAEA;;AAEA;AACA,EAAE,4DAAuB;AACzB;AACA,EAAE,gEAA2B;AAC7B;;AAEA;AACA;AACA,EAAE,iEAA4B;AAC9B;;AAEA;AACA,EAAE,sDAAa,CAAC,6CAAQ;AACxB,EAAE,+DAAsB,CAAC,6CAAQ;AACjC,EAAE,+DAAsB,CAAC,6CAAQ;AACjC,EAAE,+DAAsB,CAAC,6CAAQ;AACjC;;AAEA;AACA;AACA,EAAE,kFAAsC;AACxC,EAAE,6EAAiC;AACnC,EAAE,qFAAyC;AAC3C,EAAE,gFAAoC;;AAEtC,EAAE,yEAA6B;AAC/B;AACA;AACA;AACA,GAAG;AACH,EAAE,4EAAgC;AAClC;AACA;AACA;AACA,GAAG;AACH,SAAS,qDAAgB;AACzB,IAAI,sDAAiB,CAAC,oDAAe;AACrC;AACA,SAAS,wDAAmB;AAC5B,IAAI,yDAAoB,CAAC,uDAAkB;AAC3C;AACA,EAAE,uEAA2B;AAC7B,EAAE,mEAA8B;AAChC,EAAE,2DAAsB;AACxB,EAAE,0DAAqB;AACvB;AACA;AACA,gBAAgB,iEAAqB;AACrC;AACA;AACA;AACA;AACA;;AAEA;;AAE2B;;;;;;;UCvT3B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACuD;;;AAGvD,oEAAe","sources":["webpack://battleship/./src/dom.js","webpack://battleship/./src/gamePieces.js","webpack://battleship/./src/gamePlay.js","webpack://battleship/./src/humanPlaceShips.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["import { Fleet } from \"./gamePieces.js\";\n\nconst playerGB = document.getElementById(\"playerGB\");\nconst cpuGB = document.getElementById(\"cpuGB\");\nconst cpuGBcontainer = document.getElementById(\"cpuGBcontainer\");\nconst hitOrMiss = document.getElementById(\"hit-or-miss\");\nconst announcements = document.getElementById(\"announcements\");\nconst endGameMsg = document.querySelector(\"[data-end-game-message]\");\nconst endGameScreen = document.getElementById(\"end-game-message\");\nconst preGameFleet = document.getElementById(\"fleet\");\n\n\n\nconst makeGameboard = (someDiv, callback = null) => {\n  for (let i = 0; i < 100; i++) {\n    let cell = document.createElement(\"div\");\n    let idNum = i;\n    cell.setAttribute(\"data-x\", idNum % 10);\n    cell.setAttribute(\"data-y\", Math.floor(idNum / 10));\n    if (i < 10) {\n      idNum = \"0\" + String(idNum);\n    }\n    cell.classList.add(\"cell\");\n\n    cell.id = someDiv.id + idNum;\n    if (callback) {\n      cell.addEventListener(\"click\", callback);\n    }\n    someDiv.append(cell);\n  }\n};\n\nconst addCallbackToGameboard = (gameBoardDiv, func, type) => {\n    const cells = [\n      ...gameBoardDiv.querySelectorAll(`#${gameBoardDiv.id}> .cell`),\n    ];\n    cells.forEach((cell) => {\n      cell.addEventListener(type, func);\n    });\n};\n\nconst removeCallbackFromGameboard = (gameBoardDiv, func, type) => {\n  const cells = [\n    ...gameBoardDiv.querySelectorAll(`#${gameBoardDiv.id}> .cell`),\n  ];\n  cells.forEach((cell) => {\n    cell.removeEventListener(type, func)\n  });\n};\n\nconst makeFleet = (someDiv, callback = null) => {\n  let fleetToPlace = Fleet();\n  fleetToPlace.forEach((ship) => {\n    const shipNameDiv = document.createElement(\"div\");\n    shipNameDiv.textContent = ship.name;\n    shipNameDiv.setAttribute(\"data-name\", `${ship.name}`);\n    const shipBodyDiv = document.createElement(\"div\");\n    shipBodyDiv.draggable = true;\n    shipBodyDiv.classList.add(\"ship\");\n    for (let i = 0; i < ship.length; i++) {\n      shipBodyDiv.append(document.createElement(\"div\"));\n    }\n    someDiv.append(shipNameDiv, shipBodyDiv);\n  });\n};\n\nconst displayAttack = (player, x, y, success) => {\n  let parent = null;\n  if (player === \"computer\") {\n    parent = 'playerGB';\n  }\n  if (player === \"human\") {\n    parent = 'cpuGB'\n  }\n\n  let whichBoard = document.getElementById(`${parent}`);\n  let element = whichBoard.querySelector(`[data-x=\"${x}\"][data-y=\"${y}\"]`); \n  if (success) {\n    element.classList.add(\"hit\");\n  } else {\n    element.classList.add(\"miss\");\n  }\n};\n\nexport {\n  makeGameboard,\n  displayAttack,\n  playerGB,\n  cpuGB,\n  hitOrMiss,\n  announcements,\n  endGameMsg,\n  endGameScreen,\n  makeFleet,\n  preGameFleet,\n  cpuGBcontainer,\n  addCallbackToGameboard,\n  removeCallbackFromGameboard,\n};\n","const Ship = (len, name = null, xi = null, yi = null, _axis = \"x\") => {\n  let _hitNumber = 0;\n  const x = xi;\n  const y = yi;\n  const axis = _axis;\n  let length = len;\n  const hit = () => {\n    _hitNumber = _hitNumber + 1;\n    return _hitNumber;\n  };\n  const isSunk = () => {\n    if (_hitNumber >= length) {\n      return true;\n    }\n    return false;\n  };\n  return {\n    length,\n    name,\n    x,\n    y,\n    axis,\n    get hitNumber() {\n      return _hitNumber;\n    },\n    set setHits(val) {\n      _hitNumber = val;\n    },\n    hit,\n    isSunk,\n  };\n};\n\nconst Fleet = () => {\n  return [\n    Ship(5, \"Carrier\"),\n    Ship(4, \"Battleship\"),\n    Ship(3, \"Cruiser\"),\n    Ship(3, \"Submarine\"),\n    Ship(2, \"Destroyer\"),\n  ];\n};\n\nconst Gameboard = () => {\n  const boardLength = 10;\n  const fleet = Fleet();\n  const occupiedSquares = [];\n  const placeShip = (name, xi, yi, axis) => {\n    let ship = fleet.filter((item) => item.name === name)[0];\n    if (xi < 0 || xi > boardLength - 1 || yi < 0 || yi > boardLength - 1) {\n      throw new Error(\"Location out of bounds\");\n    }\n    if (\n      (axis === \"x\" && xi > boardLength - ship.length) ||\n      (axis === \"y\" && yi > boardLength - ship.length)\n    ) {\n      throw new Error(\"Ship partially out of bounds\");\n    }\n\n    if (axis === \"x\") {\n      for (let i = 0; i < ship.length; i++) {\n        if (\n          occupiedSquares.filter(\n            (entry) => entry.x === xi + i && entry.y === yi\n          ).length > 0\n        ) {\n          throw new Error(\"Another ship is in the way\");\n        }\n      }\n    }\n    if (axis === \"y\") {\n      for (let i = 0; i < ship.length; i++) {\n        if (\n          occupiedSquares.filter(\n            (entry) => entry.x === xi && entry.y === yi + i\n          ).length > 0\n        ) {\n          throw new Error(\"Another ship is in the way\");\n        }\n      }\n    }\n\n    ship.x = parseInt(xi);\n    ship.y = parseInt(yi);\n    ship.axis = axis;\n\n    // If the ship is already in the array, modify it.\n    if (occupiedSquares.filter(e  => e.name === ship.name).length > 0) {\n      let shipStart = occupiedSquares.filter(e=> e.name === ship.name)[0]\n      for (let i = 0; i < ship.length; i++) {\n        if (axis === \"x\") {\n          shipStart.x = ship.x + 1;\n          shipStart.y = ship.y;\n        } else {\n          shipStart.x = ship.x;\n          shipStart.y = ship.y + 1;\n        }\n      }\n      return ship\n    }\n\n    // Else push the ship to the array\n    for (let i = 0; i < ship.length; i++) {\n      if (axis === \"x\") {\n        occupiedSquares.push({ x: ship.x + i, y: ship.y, name: ship.name });\n      } else {\n        occupiedSquares.push({ x: ship.x, y: ship.y + i, name: ship.name });\n      }\n    }\n    return ship;\n  };\n\n\n\n  const shotRecord = [];\n  const receiveAttack = (x, y) => {\n    x = parseInt(x);\n    y = parseInt(y);\n    shotRecord.push({ x, y });\n    let success = false;\n    fleet.forEach((ship) => {\n      if (ship.axis === \"x\") {\n        if (x >= ship.x && x < ship.x + ship.length && y === ship.y) {\n          ship.hit();\n          success = true;\n          return success;\n        }\n      } else if (ship.axis === \"y\") {\n        if (x === ship.x && y >= ship.y && y < ship.y + ship.length) {\n          ship.hit();\n          success = true;\n          return success;\n        }\n      }\n    });\n    return success;\n  };\n  const allSunk = () => {\n    return fleet.every((ship) => ship.isSunk());\n  };\n\n  return {\n    boardLength,\n    fleet,\n    occupiedSquares,\n    placeShip,\n    shotRecord,\n    receiveAttack,\n    allSunk,\n  };\n};\n\nconst Player = (_name = null) => {\n  const name = _name;\n  const gameboard = Gameboard();\n  const attack = (opponent, _x, _y) => {\n    let x = parseInt(_x);\n    let y = parseInt(_y);\n    if (\n      x < 0 ||\n      x >= opponent.gameboard.boardLength ||\n      y < 0 ||\n      y >= opponent.gameboard.boardLength\n    ) {\n      throw new Error(\"Attack out of bounds\");\n    }\n    if (\n      opponent.gameboard.shotRecord.filter((e) => e.x === x && e.y === y)\n        .length != 0\n    ) {\n      throw new Error(\"Attack redundant\");\n    }\n    return { success: opponent.gameboard.receiveAttack(x, y), x, y };\n  };\n\n  const randomlyPlaceShips = () => {\n    gameboard.fleet.forEach((ship, index, arr) => {\n      let orientation = Math.random();\n      let xpos = null;\n      let ypos = null;\n      let axis = null;\n      // Randomally pick an axis location that fits the ship\n      if (orientation > 0.5) {\n        axis = \"x\";\n        xpos = Math.floor(\n          Math.random() * (gameboard.boardLength - ship.length)\n        );\n        ypos = Math.floor(Math.random() * gameboard.boardLength);\n      } else {\n        axis = \"y\";\n        xpos = Math.floor(Math.random() * gameboard.boardLength);\n        ypos = Math.floor(\n          Math.random() * (gameboard.boardLength - ship.length)\n        );\n      }\n\n      // If it clashes with a placed ship repick by recursion\n      while (isBlocked(ship, axis, xpos, ypos, gameboard.occupiedSquares)) {\n        orientation = Math.random();\n        if (orientation > 0.5) {\n          axis = \"x\";\n          xpos = Math.floor(\n            Math.random() * (gameboard.boardLength - ship.length)\n          );\n          ypos = Math.floor(Math.random() * gameboard.boardLength);\n        } else {\n          axis = \"y\";\n          xpos = Math.floor(Math.random() * gameboard.boardLength);\n          ypos = Math.floor(\n            Math.random() * (gameboard.boardLength - ship.length)\n          );\n        }\n      }\n      gameboard.placeShip(ship.name, xpos, ypos, axis);\n    });\n  };\n\n  return {\n    name,\n    gameboard,\n    attack,\n    randomlyPlaceShips,\n  };\n};\n\nlet human = Player(\"You\");\nlet computer = Player(\"Computer\");\n\n// Give computer an attack strategy\ncomputer.randomAttack = function (enemy) {\n  let x = Math.floor(Math.random() * enemy.gameboard.boardLength);\n  let y = Math.floor(Math.random() * enemy.gameboard.boardLength);\n  while (\n    enemy.gameboard.shotRecord.filter((e) => e.x === x && e.y === y).length != 0\n  ) {\n    x = Math.floor(Math.random() * enemy.gameboard.boardLength);\n    y = Math.floor(Math.random() * enemy.gameboard.boardLength);\n  }\n  //  Returns true if success\n  return computer.attack(enemy, x, y);\n};\n\n// isBlocked() helps computer place its ships\nfunction isBlocked(ship, axis, xpos, ypos, occSqArr) {\n  let coOrdinatesToTest = [];\n  if (axis === \"x\") {\n    for (let i = 0; i < ship.length; i++) {\n      coOrdinatesToTest.push({ x: parseInt(xpos) + i, y: parseInt(ypos) });\n    }\n  } else if (axis === \"y\") {\n    for (let i = 0; i < ship.length; i++) {\n      coOrdinatesToTest.push({ x: parseInt(xpos), y: parseInt(ypos) + i });\n    }\n  }\n  for (let i = 0; i < coOrdinatesToTest.length; i++) {\n    if (\n      occSqArr.filter(\n        (e) =>\n          e.x == coOrdinatesToTest[i].x &&\n          e.y == coOrdinatesToTest[i].y &&\n          e.x !== null &&\n          e.y !== null &&\n          e.name !== ship.name\n      ).length > 0\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\ncomputer.randomlyPlaceShips();\n//human.randomlyPlaceShips();\n\nexport { Ship, Fleet, Gameboard, Player, computer, human, isBlocked };\n","import { computer, human } from \"./gamePieces.js\";\nimport {\n  makeGameboard, \n  displayAttack, \n  cpuGB, \n  hitOrMiss, \n  announcements, \n  endGameMsg, \n  endGameScreen, \n  \n} from \"./dom.js\";\n\n\nconst revealCPUShips = () => {\n  for (const ship of computer.gameboard.fleet) {\n    for (let i = 0; i < ship.length; i++) {\n      let x = ship.x;\n      let y = ship.y;\n      if (ship.axis === \"x\") {\n        x = x + i;\n      } else {\n        y = y + i;\n      }\n      let element = cpuGB.querySelector( `[data-x=\"${x}\"][data-y=\"${y}\"]`);\n      element.classList.add(\"hasShip\");\n      element.setAttribute(\"data-name\", `${ship.name}`);\n    }\n  }\n};\n\nconst game = () => {\n  let gameOver = false;\n  let boardLocked = false;\n\n  const playerTurn = function (e) {\n    if (gameOver) return;\n    if (e.target.matches(\".hit\") || e.target.matches(\".miss\")) {\n      return;\n    }\n    if (boardLocked) {\n      return;\n    }\n    boardLocked = true;\n    announcements.textContent = \"\";\n   \n    let x = e.target.getAttribute(\"data-x\");\n    let y = e.target.getAttribute(\"data-y\");\n  \n    let before = countSunkShips(computer);\n    let attack = human.attack(computer, x, y);\n   \n    if (attack.success) {\n      hitOrMiss.textContent = \"You hit the enemy!\";\n      displayAttack(\"human\", attack.x, attack.y, true);\n      let after = countSunkShips(computer);\n      if (after.count > before.count) {\n        let newlySunk = after.list\n          .filter((name) => !before.list.includes(name))[0]\n          .toLowerCase();\n        announcements.textContent = `You sunk a ${newlySunk}!`;\n      }\n      if (computer.gameboard.allSunk()) {\n        endGameMsg.textContent = \"You won!\";\n        endGameScreen.classList.add(\"show\");\n        gameOver = true;\n        return;\n      }\n    } else {\n      hitOrMiss.textContent = \"You missed!\";\n      displayAttack(\"human\", attack.x, attack.y, false);\n    }\n    setTimeout(computerTurn, 1000);\n  };\n\n  const computerTurn = function () {\n    let before = countSunkShips(human);\n    let attack = computer.randomAttack(human);\n    if (attack.success) {\n      hitOrMiss.textContent = \"You've been hit!\";\n      displayAttack(\"computer\", attack.x, attack.y, true);\n      let after = countSunkShips(human);\n      if (after.count > before.count) {\n        let newlySunk = after.list\n          .filter((name) => !before.list.includes(name))[0]\n          .toLowerCase();\n        announcements.textContent = `They sunk your ${newlySunk}!`;\n      }\n      if (human.gameboard.allSunk()) {\n        endGameMsg.textContent = \"You lost!\";\n        endGameScreen.classList.add(\"show\");\n        gameOver = true;\n        return;\n      }\n    } else {\n      hitOrMiss.textContent = \"They missed!\";\n      displayAttack(\"computer\", attack.x, attack.y, false);\n    }\n    boardLocked = false;\n  };\n\n  const countSunkShips = function (player) {\n    let count = 0;\n    let list = [];\n    player.gameboard.fleet.forEach((ship) => {\n      if (ship.isSunk()) {\n        list.push(ship.name);\n        count++;\n      }\n    });\n    return { count, list };\n  };\n\n  makeGameboard(cpuGB, playerTurn);\n  revealCPUShips();\n};\n\nexport { game }","import {\n  cpuGBcontainer,\n  announcements,\n  makeGameboard,\n  playerGB,\n  addCallbackToGameboard,\n  removeCallbackFromGameboard,\n  cpuGB,\n  endGameMsg,\n  endGameScreen,\n  hitOrMiss,\n} from \"./dom.js\";\nimport { computer, human, isBlocked } from \"./gamePieces.js\";\nimport { game } from \"./gamePlay.js\";\n\nlet setShip = false;\nconst changeShipButton = document.getElementById(\"changeShip\");\nlet shipIndex = 0;\nlet currentShip = human.gameboard.fleet[shipIndex];\n\n// On click callback\nconst setGridPosition = (e, ship) => {\n  let x = e.target.getAttribute(\"data-x\");\n  let y = e.target.getAttribute(\"data-y\");\n\n  // If the ship is placed and user is not clicking on head of that ship, ignore it\n  // Otherwise remove the ship from the occupied array and scrub it off the board\n  if (setShip) {\n    if (!(x == ship.x && y == ship.y)) {\n      return;\n    } else {\n      setShip = false;\n      changeShipButton.disabled = true;\n      for (let i = 0; i < ship.length; i++) {\n        human.gameboard.occupiedSquares.pop();\n      }\n      let allCells = [...document.querySelectorAll(\".cell\")];\n      allCells.forEach((e) => {\n        if (e.dataset.ship === `${ship.name}`) {\n          e.classList.remove(\"set\");\n        }\n      });\n      return;\n    }\n  }\n\n  // If the ship can't fit, don't place it\n  if (ship.axis === \"x\") {\n    if (x > 10 - ship.length) {\n      return;\n    }\n  }\n  if (ship.axis === \"y\") {\n    if (y > 10 - ship.length) {\n      return;\n    }\n  }\n  // If the ship overlaps with another ship, don't place it, just exit\n  if (isBlocked(ship, ship.axis, x, y, human.gameboard.occupiedSquares)) {\n    console.log(human.gameboard.occupiedSquares);\n    console.log(\"blocked\");\n    return;\n  }\n\n  setShip = true;\n  // Place ship, mark the board\n\n  human.gameboard.placeShip(ship.name, x, y, ship.axis);\n\n  for (let i = 0; i < ship.length; i++) {\n    let cell = null;\n    if (ship.axis === \"x\") {\n      let xcord = parseInt(ship.x) + i;\n      cell = document.querySelector(`[data-x=\"${xcord}\"][data-y=\"${ship.y}\"]`);\n    }\n    if (ship.axis === \"y\") {\n      let ycord = parseInt(ship.y) + i;\n      cell = document.querySelector(`[data-x=\"${ship.x}\"][data-y=\"${ycord}\"]`);\n    }\n    if (i === 0) {\n      cell.classList.add(\"head\");\n    }\n    cell.classList.add(\"hasShip\");\n\n    cell.classList.add(\"set\");\n    cell.dataset.ship = `${ship.name}`;\n  }\n  setShip = true;\n  changeShipButton.disabled = false;\n  return;\n};\n\n// Named wrappers necessary so callback can be removed and can take a parameter\nconst setGridPositionWrapper = (e) => {\n  setGridPosition(e, currentShip);\n};\n\n// On double-click\nconst setOrientation = (e, ship) => {\n  if (\n    e.target.getAttribute(\"data-x\") == ship.x &&\n    e.target.getAttribute(\"data-y\") == ship.y &&\n    setShip === true\n  ) {\n    /// Problem below!!\n    setShip = false;\n    changeShipButton.disabled = true;\n    for (let i = 0; i < ship.length; i++) {\n      human.gameboard.occupiedSquares.pop();\n    }\n  }\n\n  // Clear the ship's position if it is already set\n  let allCells = [...document.querySelectorAll(\".cell\")];\n  allCells.forEach((e) => {\n    if (e.dataset.ship === `${ship.name}`) {\n      e.classList.remove(`set`);\n      e.classList.remove(\"hasShip\");\n    }\n  });\n\n  if (ship.axis === \"x\" && ship.y <= 10 - ship.length) {\n    ship.axis = \"y\";\n  } else if (ship.axis === \"y\" && ship.x <= 10 - ship.length) {\n    ship.axis = \"x\";\n  }\n  for (let i = 0; i < ship.length; i++) {\n    if (ship.axis === \"x\") {\n      let xcord = parseInt(ship.x) + i;\n      let cell = document.querySelector(\n        `[data-x=\"${xcord}\"][data-y=\"${ship.y}\"]`\n      );\n      if (i === 0) {\n        cell.classList.add(\"head\");\n      }\n      cell.classList.add(\"hasShip\");\n      cell.dataset.ship = `${ship.name}`;\n    }\n    if (ship.axis === \"y\") {\n      let ycord = parseInt(ship.y) + i;\n      let cell = document.querySelector(\n        `[data-x=\"${ship.x}\"][data-y=\"${ycord}\"]`\n      );\n      if (i === 0) {\n        cell.classList.add(\"head\");\n      }\n      cell.classList.add(\"hasShip\");\n      cell.dataset.ship = `${ship.name}`;\n    }\n  }\n};\n\nconst setOrientationWrapper = (e) => {\n  setOrientation(e, currentShip);\n};\n\n// On hover\nconst hoverEffect = (e, ship) => {\n  // If ship is placed, no hover effect\n  if (setShip) return;\n\n  // If the ship can't fit, no hover effect\n  let x = e.target.getAttribute(\"data-x\");\n  let y = e.target.getAttribute(\"data-y\");\n\n  if (ship.axis === \"x\") {\n    if (x > 10 - ship.length) {\n      return;\n    }\n  }\n  if (ship.axis === \"y\") {\n    if (y > 10 - ship.length) {\n      return;\n    }\n  }\n\n  // If the ship overlaps, no effect\n  if (isBlocked(ship, ship.axis, x, y, human.gameboard.occupiedSquares)) return;\n\n  // Clear the ship's position if it is already set\n  let oldPosition = [...document.querySelectorAll(`[data-ship=${ship.name}]`)];\n  oldPosition.forEach((e) => {\n    if (e.dataset.ship === `${ship.name}`) {\n      delete e.dataset.ship;\n      e.classList.remove(`hasShip`);\n      e.classList.remove(`head`);\n    }\n  });\n  ship.x = e.target.getAttribute(\"data-x\");\n  ship.y = e.target.getAttribute(\"data-y\");\n\n  for (let i = 0; i < ship.length; i++) {\n    if (ship.axis === \"x\") {\n      let xcord = parseInt(ship.x) + i;\n      let cell = document.querySelector(\n        `[data-x=\"${xcord}\"][data-y=\"${ship.y}\"]`\n      );\n      if (i === 0) {\n        cell.classList.add(\"head\");\n      }\n      cell.classList.add(\"hasShip\");\n      cell.dataset.ship = `${ship.name}`;\n    }\n    if (ship.axis === \"y\") {\n      let ycord = parseInt(ship.y) + i;\n      let cell = document.querySelector(\n        `[data-x=\"${ship.x}\"][data-y=\"${ycord}\"]`\n      );\n      if (i === 0) {\n        cell.classList.add(\"head\");\n      }\n      cell.classList.add(\"hasShip\");\n      cell.dataset.ship = `${ship.name}`;\n    }\n  }\n};\nconst hoverEffectWrapper = (e) => {\n  hoverEffect(e, currentShip);\n};\n\n// On button press\nconst getNextShip = () => {\n  removeCallbackFromGameboard(playerGB, setGridPositionWrapper, \"click\");\n  removeCallbackFromGameboard(playerGB, setOrientationWrapper, \"dblclick\");\n  removeCallbackFromGameboard(playerGB, hoverEffectWrapper, \"mouseover\");\n  shipIndex++;\n\n  if (shipIndex == human.gameboard.fleet.length - 1) {\n    changeShipButton.textContent = \"Finish\";\n  }\n  if (shipIndex == human.gameboard.fleet.length) {\n    announcements.textContent = \"\";\n    announcements.classList.remove(\"instructions\");\n    changeShipButton.style.display = \"none\";\n    cpuGBcontainer.style.display = \"block\";\n    let allCells = [...document.querySelectorAll(\".cell\")];\n    allCells.forEach((e) => {\n      e.classList.remove(\"head\");\n      e.classList.add(\"gameOn\");\n    });\n\n    game();\n    return;\n  }\n  currentShip = human.gameboard.fleet[shipIndex];\n\n  changeShipButton.disabled = true;\n  addCallbackToGameboard(playerGB, setGridPositionWrapper, \"click\");\n  addCallbackToGameboard(playerGB, setOrientationWrapper, \"dblclick\");\n  addCallbackToGameboard(playerGB, hoverEffectWrapper, \"mouseover\");\n  setShip = false;\n};\n\nchangeShipButton.addEventListener(\"click\", getNextShip);\n\nconst instructions = () => {\n  announcements.innerHTML =\n    \"Click on a cell to place a ship. Clicking on the head of the most recently placed ship allows you to move it again. <br/> &nbsp <br/> Double-clicking changes the ship's oriention. <br/> &nbsp <br/>When you finish placing ships, attack your oopponent by clicking on their board.\";\n  announcements.classList.add(\"instructions\");\n};\n\nconst humanPlaceShips = () => {\n  // Hide enemy board\n  cpuGBcontainer.style.display = \"none\";\n  instructions();\n\n  // Make the human gameboard once\n  makeGameboard(playerGB);\n  addCallbackToGameboard(playerGB, setGridPositionWrapper, \"click\");\n  addCallbackToGameboard(playerGB, setOrientationWrapper, \"dblclick\");\n  addCallbackToGameboard(playerGB, hoverEffectWrapper, \"mouseover\");\n};\n\nconst restartButton = document.getElementById(\"restart-button\");\nconst reset = () => {\n  human.gameboard.occupiedSquares.length = 0;\n  human.gameboard.shotRecord.length = 0;\n  computer.gameboard.occupiedSquares.length = 0;\n  computer.gameboard.shotRecord.length = 0;\n\n  human.gameboard.fleet.forEach((ship) => {\n    ship.x = null;\n    ship.y = null;\n    ship.setHits = 0;\n  });\n  computer.gameboard.fleet.forEach((ship) => {\n    ship.x = null;\n    ship.y = null;\n    ship.setHits = 0;\n  });\n  while (cpuGB.firstChild) {\n    cpuGB.removeChild(cpuGB.lastChild);\n  }\n  while (playerGB.firstChild) {\n    playerGB.removeChild(playerGB.lastChild);\n  }\n  computer.randomlyPlaceShips();\n  endGameScreen.classList.remove(\"show\");\n  endGameMsg.textContent = \"\";\n  hitOrMiss.textContent = \"\";\n  setShip = false;\n  shipIndex = 0;\n  currentShip = human.gameboard.fleet[shipIndex];\n  changeShipButton.style.display = \"block\";\n  changeShipButton.disabled = true;\n  changeShipButton.textContent = \"Get next ship\";\n  humanPlaceShips();\n};\n\nrestartButton.addEventListener(\"click\", reset);\n\nexport { humanPlaceShips };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","//import css from \"./styles.css\";\nimport { humanPlaceShips } from \"./humanPlaceShips.js\";\n\n\nhumanPlaceShips();\n"],"names":[],"sourceRoot":""}